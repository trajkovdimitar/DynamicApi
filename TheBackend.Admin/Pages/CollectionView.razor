@page "/collections/{CollectionName}"
@inject CollectionService Collections
@implements IDisposable

@if (definition == null)
{
    <p class="text-center">Loading...</p>
}
else if (records != null && !records.Any())
{
    <EmptyState Message="No items found." OnCreate="NewRecord" />
}
else if (records != null)
{
    <RecordTable Definition="definition" Records="records" OnEdit="EditRecord" OnDelete="DeleteRecord" />
    <div class="fab">
        <button class="btn btn-success" @onclick="NewRecord">
            <i class="bi bi-plus"></i>
        </button>
    </div>
}

@if (editingRecord != null)
{
    <div class="overlay">
        <div class="modal">
            <h2 class="text-xl font-bold mb-4">@modalTitle</h2>
            <EditForm OnValidSubmit="SaveRecord">
                @foreach (var p in definition!.Properties)
                {
                    <div class="mb-3">
                        <label class="form-label">@p.Name</label>
                        <InputText class="form-control"
                                   value="@GetValue(p.Name)"
                                   @onchange="e => editingRecord[p.Name] = e.Value?.ToString() ?? string.Empty" />
                    </div>
                }
                <div class="mt-4 text-end">
                    <button type="submit" class="btn btn-primary me-2">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [CascadingParameter] public MainLayout? Layout { get; set; }
    [Parameter] public string CollectionName { get; set; } = string.Empty;

    private ModelDefinition? definition;
    private List<Dictionary<string, object>>? records;
    private Dictionary<string, object>? editingRecord;
    private string modalTitle = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        definition = await Collections.GetDefinitionAsync(CollectionName);
        if (definition != null)
        {
            records = await Collections.GetRecordsAsync(CollectionName);
            Layout?.SetRightSidebar(@<ContextSidebar Definition="definition" />);
        }
    }

    private void NewRecord()
    {
        editingRecord = definition!.Properties.ToDictionary(p => p.Name, _ => (object)string.Empty);
        modalTitle = $"Add {CollectionName}";
    }

    private void EditRecord(Dictionary<string, object> row)
    {
        editingRecord = new Dictionary<string, object>(row);
        modalTitle = $"Edit {CollectionName}";
    }

    private void CancelEdit()
    {
        editingRecord = null;
    }

    private async Task SaveRecord()
    {
        if (editingRecord == null || definition == null)
            return;

        var key = definition.Properties.FirstOrDefault(p => p.IsKey);
        if (key != null && records!.Any(r => r[key.Name]?.ToString() == editingRecord[key.Name]?.ToString()))
        {
            await Collections.UpdateAsync(CollectionName, editingRecord[key.Name]!, editingRecord);
        }
        else
        {
            await Collections.CreateAsync(CollectionName, editingRecord);
        }

        records = await Collections.GetRecordsAsync(CollectionName);
        editingRecord = null;
    }

    private async Task DeleteRecord(Dictionary<string, object> row)
    {
        var key = definition?.Properties.FirstOrDefault(p => p.IsKey);
        if (key == null) return;
        await Collections.DeleteAsync(CollectionName, row[key.Name]!);
        records = await Collections.GetRecordsAsync(CollectionName);
    }

    private string GetValue(string key) => editingRecord != null && editingRecord.TryGetValue(key, out var value)
        ? value?.ToString() ?? string.Empty
        : string.Empty;

    public void Dispose()
    {
        Layout?.SetRightSidebar(null);
    }
}
