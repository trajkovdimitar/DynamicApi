@page "/models"
@inject ApiClient Api
@using TheBackend.Domain.Models

<h1 class="h3">Models</h1>

<div class="mb-4">
    <button class="btn btn-primary" @onclick="NewModel">Add Model</button>
</div>

@if (models == null)
{
    <p>Loading...</p>
}
else
{
    @if (!models.Any())
    {
        <p>No models defined.</p>
    }
    else
    {
        <div class="row g-3">
            @foreach (var model in models)
            {
                <div class="col-12 col-md-6 col-lg-4">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h3 class="h5 mb-0">@model.ModelName</h3>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditModel(model)">Edit</button>
                        </div>
                        <table class="table table-sm mb-0">
                        <tbody>
                            @foreach (var prop in model.Properties)
                            {
                                <tr>
                                    <td class="fw-medium">@prop.Name</td>
                                    <td class="text-end">@prop.Type</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    </div>
                </div>
            }
        </div>
    }
}

@if (editingModel != null)
{
    <div class="overlay">
        <div class="modal">
            <h2 class="text-xl font-bold mb-4">@formTitle</h2>
            <EditForm Model="editingModel" OnValidSubmit="SaveModel">
                <div class="mb-3">
                    <label class="form-label">Model Name</label>
                    <InputText class="form-control" @bind-Value="editingModel.ModelName" />
                </div>
                <h3 class="h5 mb-2">Properties</h3>
                @foreach (var prop in editingModel.Properties)
                {
                    <div class="row align-items-end mb-2">
                        <div class="col-3">
                            <InputText class="form-control" placeholder="Name" @bind-Value="prop.Name" />
                        </div>
                        <div class="col-3">
                            <InputText class="form-control" placeholder="Type" @bind-Value="prop.Type" />
                        </div>
                        <div class="col-2">
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @bind-Value="prop.IsKey" />
                                <label class="form-check-label">Key</label>
                            </div>
                        </div>
                        <div class="col-2">
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @bind-Value="prop.IsRequired" />
                                <label class="form-check-label">Required</label>
                            </div>
                        </div>
                        <div class="col-2">
                            <InputNumber class="form-control" placeholder="Max Length" @bind-Value="prop.MaxLength" />
                        </div>
                        <div class="col-12 col-md-1 mt-2 mt-md-0">
                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveProperty(prop)">Remove</button>
                        </div>
                    </div>
                }
                <button type="button" class="btn btn-secondary mb-3" @onclick="AddProperty">Add Property</button>
                <div class="mt-4 text-end">
                    <button type="submit" class="btn btn-primary me-2">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<ModelDefinition>? models;
    private ModelDefinition? editingModel;
    private string formTitle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadModels();
    }

    private async Task LoadModels()
    {
        models = await Api.GetAsync<List<ModelDefinition>>("api/models");
    }

    private void NewModel()
    {
        editingModel = new ModelDefinition();
        formTitle = "Create Model";
    }

    private void EditModel(ModelDefinition model)
    {
        editingModel = new ModelDefinition
        {
            ModelName = model.ModelName,
            Properties = model.Properties.Select(p => new PropertyDefinition
            {
                Name = p.Name,
                Type = p.Type,
                IsKey = p.IsKey,
                IsRequired = p.IsRequired,
                MaxLength = p.MaxLength
            }).ToList()
        };
        formTitle = $"Edit {model.ModelName}";
    }

    private void AddProperty()
    {
        editingModel!.Properties.Add(new PropertyDefinition());
    }

    private void RemoveProperty(PropertyDefinition prop)
    {
        editingModel!.Properties.Remove(prop);
    }

    private async Task SaveModel()
    {
        await Api.PostAsync<ModelDefinition, string>("api/models", editingModel!);
        editingModel = null;
        await LoadModels();
    }

    private void CancelEdit()
    {
        editingModel = null;
    }
}
